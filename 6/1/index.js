/**
 * Вычислить сумму чисел до данного
 * важность: 5
 * 
 * Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.
 * 
 * Например:
 * 
 * sumTo(1) = 1
 * sumTo(2) = 2 + 1 = 3
 * sumTo(3) = 3 + 2 + 1 = 6
 * sumTo(4) = 4 + 3 + 2 + 1 = 10
 * ...
 * sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
 * 
 * Сделайте три варианта решения:
 * 
 *     С использованием цикла.
 *     Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
 *     С использованием формулы арифметической прогрессии.
 * 
 * Пример работы вашей функции:
 * 
 * function sumTo(n) { ... ваш код ...  }
 * 
 *  alert( sumTo(100) ); // 5050
 * 
 * P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?
 * 
 * P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)?
 */

const sumTo = n => {
  let count = 0

  for (let i = n; i >= 1; i--) {
    count += i
  }
  return count
}
//console.log(sumTo(5))

const sumTo2 = n => n == 1 ? n : n + sumTo2(n - 1)
//console.log('rec', sumTo2(5))

//Tn = 1 + 2 + 3 ... + n = n * (n + 1) / 2
const sumTo3 = n => n * (n + 1) / 2
//console.log(sumTo3(5))

/**
 * Вычислить факториал
 * важность: 4
 * 
 * Факториал натурального числа – это число, умноженное на "себя минус один", затем на "себя минус два", и так далее до 1. Факториал n обозначается как n!
 * 
 * Определение факториала можно записать как:
 * 
 * n! = n * (n - 1) * (n - 2) * ...*1
 * 
 * Примеры значений для разных n:
 * 
 * 1! = 1
 * 2! = 2 * 1 = 2
 * 3! = 3 * 2 * 1 = 6
 * 4! = 4 * 3 * 2 * 1 = 24
 * 5! = 5 * 4 * 3 * 2 * 1 = 120
 * 
 * Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.
 * 
 * alert( factorial(5) ); // 120
 * 
 * P.S. Подсказка: n! можно записать как n * (n-1)! Например: 3! = 3*2! = 3*2*1! = 6
 */
const factorial = n => n == 1 ? n : n * factorial(n - 1)
//console.log(factorial(5))



/**
 * Числа Фибоначчи
 * важность: 5
 * 
 * Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. То есть, следующее число получается как сумма двух предыдущих.
 * 
 * Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
 * 
 * Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.
 * 
 * Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.
 * 
 * Пример работы:
 * 
 * function fib(n) {  ваш код  }
 * 
 *  alert(fib(3)); // 2
 * alert(fib(7)); // 13
 * alert(fib(77)); // 5527939700884757
 * 
 * P.S. Все запуски функций из примера выше должны работать быстро. Вызов fib(77) должен занимать не более доли секунды.
 */
// 0: 0 + 1 = 1
// 1:     1 + 1 = 2
// 2:         1 + 2 = 3
// 3:             2 + 3 = 5
// 4:                 3 + 5 = 8
// 5:                     5 + 8 = 13
// 6:                         8 + 13 = 21
// 7:                             13 + 21 = 34


// когда в объекте m нет n сохраняем его и при дальнейших вычислениях считываем
// тем самым оптимизируем рекурсию
const fib = (n, m) => {

  if (n < 2) return n

  if (!m[n]) m[n] = fib(n - 1, m) + fib(n - 2, m)

  return m[n]

  // if (n < 2) {
  //   return n
  // }

  // if (!m[n]) {
  //   m[n] = fib(n - 1, m) + fib(n - 2, m)
  // }

  // return m[n]
}
//console.log(fib(77, {}))



/**
 * Вывод односвязного списка
 * важность: 5
 * 
 * Допустим, у нас есть односвязный список (как описано в главе Рекурсия и стек):
 * 
 * let list = {
 *   value: 1,
 *   next: {
 *     value: 2,
 *     next: {
 *       value: 3,
 *       next: {
 *         value: 4,
 *         next: null
 *       }
 *     }
 *   }
 * };
 * 
 * Напишите функцию printList(list), которая выводит элементы списка по одному.
 * 
 * Сделайте два варианта решения: используя цикл и через рекурсию.
 * 
 * Как лучше: с рекурсией или без?
 */
let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};

const printList = list => {
  let values = []

  while (list) {
    values.push(list.value)
    list = list.next
  }
  return values
}
//console.log(printList(list))

let values = []

const printList2 = list => {
  values.push(list.value)
  if (list.next) printList2(list.next)
  return values
}
//console.log(printList2(list))


/**
 * Вывод односвязного списка в обратном порядке
 * важность: 5
 * 
 * Выведите односвязный список из предыдущего задания Вывод односвязного списка в обратном порядке.
 * 
 * Сделайте два решения: с использованием цикла и через рекурсию.
 */
const printListReverce = list => {
  let values = []

  while (list) {
    values.push(list.value)
    list = list.next
  }
  return values.reverse()
}

//console.log(printListReverce(list))


let val = []
const printListReverce2 = list => {

  if (list.next) printListReverce2(list.next)
  val.push(list.value)
  return val
}

//console.log(printListReverce2(list))